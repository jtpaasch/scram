(** Implements {!Ast}. *)

exception InvalidToken of string

(** Constructs an AST (which is really just a {!Node.t} list).

    Arguments:
    - a {!Token.t} list (generated by {!Lexer.tokenize}).
    - an accumulator (e.g., an empty {!Node.t} list).
    
    Returns: A {!Node.t} list. *)
let rec build tokens acc =
  match tokens with
  | [] -> acc
  | hd :: tl ->
    let node = match Token.token hd with
    | Token_type.Blank -> Node.Blank.create (Token.data hd)
    | Token_type.Comment -> Node.Comment.create (Token.data hd)
    | Token_type.Code -> Node.Code.create (Token.data hd)
    | Token_type.ProfiledCode -> Node.ProfiledCode.create (Token.data hd)
    | Token_type.Stats -> Node.Stats.create (Token.data hd)
    | Token_type.Diff -> Node.Diff.create (Token.data hd)
    | Token_type.Output ->
      raise (InvalidToken "Cannot process output token in AST.")
    in
    build tl (List.append acc [node])
